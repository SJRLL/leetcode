
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:

输入 : [7, 1, 5, 3, 6, 4]
输出 : 7
 解释 : 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
	  随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。
	  示例 2 :

  输入 : [1, 2, 3, 4, 5]
   输出 : 4
	解释 : 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
		 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
		 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
	 示例 3 :

 输入 : [7, 6, 4, 3, 1]
 输出 : 0
  解释 : 在这种情况下, 没有交易完成, 所以最大利润为 0。



//看到很多题解纠结什么买卖问题，我觉得有点点陷入误区了，真的不用纠结买和卖。
//
//虽然题目说是和买卖股票相关，但是不能被这样的类比所束缚住了。题目本质上是给出一串数字，求某种最大值。这整一串数字是已知的，真实的股市哪里会有知道后面走势的。**如果真把题目当成股市了，**反倒是容易陷入误区，搞得好像下一个数字是大了还是小了像未知的一样。
//
//比如[7, 1, 5, 3, 6, 4]，第一天是7，那是买是卖，看第二天是涨了还是跌了做决定就好（因为题目都把整串数字都告诉你了，这就像把未来走势都告诉你了一样，真实的股市里肯定不能这样操作，类比股票买卖的话，容易意识不到这一点）。第二天变成1，跌了，那就可以假设第一天自己没有买。如果第二天是10，那你可以假设自己第一天买了。
//
//说来说去，这道题不是真的买卖股票，本质是“给出一串数字，求某种最大值”
//
//综上可见，在做leetcode的时候一定要本题目本质抽出来，不要因为题目不恰当的类比，限制了自己的思维。

class Solution {
public:
	int maxProfit(vector<int>& prices) {
		int len = prices.size();
		if (len<2)
			return 0;
		int sum = 0;
		for (int i = 1; i<len; i++){
			int profit = prices[i] - prices[i - 1];
			if (profit>0)
				sum += profit;
		}
		return sum;

	}
};
