//输入: n = 12
//输出 : 3
// 解释 : 12 = 4 + 4 + 4.
//	  示例 2 :
//
//  输入 : n = 13
//   输出 : 2
//	解释 : 13 = 4 + 9.

//题解：dp（背包问题）
//首先想到的就是dp，如果用数组dp来记录n由m个完全平方数组成的话，就是dp[n] = m.
//
//对于数字n，可以进行分解，分解成某个数s和完全平方数的和，于是就有了dp[n] = dp[s] + 1 。
//
//然后我们假设\(dp(n) \)表示数字\(n \)最少可以表示为\(dp(n) \)个完全平方数的和，就能写出状态转移方程：
//
//dp(n) = min\{dp(n), dp(n - i * i) + 1\}
//dp(n) = min{ dp(n), dp(n−i∗i) + 1 }
//
//然后就能进入写代码的思路了。
//
//因为上述公式中\(dp(n) \)是基于\(dp(n - i * i) \)才能得到最小值，所以我们需要在从小到大进行遍历，然后逐步拿到最优解。



class Solution {
public:
	int numSquares(int n) {
		vector<int> dp(n + 1);
		for (int i = 1; i <= n; i++) {
			dp[i] = i;
			for (int j = 1; j * j <= i; j++)
				dp[i] = min(dp[i], dp[i - j * j] + 1);
		}
		return dp[n];
	}
};
